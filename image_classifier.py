# -*- coding: utf-8 -*-
"""Image classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qg-IylHvaJF5loRGR_9ms2lna6F4iG-M
"""

# import packages
import tensorflow as tf
from tensorflow import keras
from PIL import Image
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
# Keras provides utility functions to fetch and load common datasets. We will be using Fashion-MNIST dataset.
# Fashion-MNIST is a dataset of Zalando's article images consisting of a training set of 60,000 examples and a test set of 10,000 examples. 
# Each example is a 28x28 grayscale image, associated with a label from 10 classes.

fashion_mnist = keras.datasets.fashion_mnist
(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist.load_data() 
# Dataset contains a training set and testing set.
# The training set is divided into training and validation.
# The test data will be used later to evaluate the accuracy of the model

X_train_full.shape

X_train_full.dtype

X_test.shape

# Divide the dataset into training data and validation data
X_valid, X_train = X_train_full[:5000]/255.0, X_train_full[5000:]/255.0
y_valid, y_train = y_train_full[:5000], y_train_full[5000:]

X_train.shape

# These are the different classes that we are going to assign to the dataset
class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat", "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]

class_names[y_train[0]]

y_train[0]

X_train[0]

data=np.array(X_train[0])
plt.imshow(data, interpolation='nearest')
plt.show()

# Designing the Neural Network
model=keras.models.Sequential([
                               keras.layers.Flatten(input_shape=[28, 28]),
                               keras.layers.Dense(300,activation="relu"),
                               keras.layers.Dense(100,activation="relu"),
                               keras.layers.Dense(10,activation="softmax")
                              ])

model.summary()

model.layers

hidden1 = model.layers[1]
hidden1.name

weights, biases = hidden1.get_weights()

weights.shape

model.compile(loss = "sparse_categorical_crossentropy",
              optimizer = keras.optimizers.SGD(learning_rate=0.1),
              metrics = ["accuracy"])

history = model.fit(X_train, y_train, batch_size = 32, epochs = 30,
                    validation_data = (X_valid, y_valid))

pd.DataFrame(history.history).plot(figsize = (8,5))
plt.grid(True)
plt.gca().set_ylim(0,1) #set the vertical range to [0, 1]
plt.show()

score, acc = model.evaluate(X_test, y_test, verbose=2, batch_size= 1)
print('test accuracy:', acc)

X_new = X_test[:5]
y_pred = model.predict(X_new)
y_pred

classes_x = np.argmax(y_pred,axis=1)

classes_x

# Recall: class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat", "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]
data=np.array(X_new[2])
plt.imshow(data, interpolation='nearest')
plt.show()

